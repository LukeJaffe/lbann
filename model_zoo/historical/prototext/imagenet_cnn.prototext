model {
  name: "dnn"
  objective_function: "categorical_cross_entropy"
  metric: "categorical_accuracy"
  data_layout: "data_parallel"
  mini_batch_size: 32
  block_size: 256
  num_epochs: 20
  num_parallel_readers: 0
  procs_per_model: 0
  use_cudnn: false
  num_gpus: -1

  ###################################################
  # Optimzer
  ###################################################
  optimizer {
    name: "adagrad"
    learn_rate: 0.01
    momentum: 0.9
    decay: 0.5
    nesterov: true
  }

  ###################################################
  # Callbacks 
  ###################################################
  callback {
    print {
      interval: 1
    }
  }
  callback {
    timer {
      dir: "none"
    }
  }
  callback {
    summary {
      dir: "none"
      interval: 1
    }
  }

  ###################################################
  # start of layers
  ###################################################

  #######
  # INPUT
  #######
  layer {
    index: 1
    parent: 1
    data_layout: "data_parallel"
    input_distributed_minibatch_parallel_io {
    }
  }

  #############
  # CONVOLUTION
  #############
  layer {
    index: 2
    parent: 1
    data_layout: "data_parallel"
    convolution {
      num_dims: 2
      num_input_channels: 3
      input_dims: "256 256"
      num_output_channels: 32
      filter_dims: "3 3"
      conv_pads: "0 0"
      conv_strides: "1 1"
      activation_type: "relu"
      weight_initialization: "glorot_uniform"
    }
  }

  ######
  # RELU
  ######
  layer {
    index: 3
    parent: 2
    data_layout: "data_parallel"
    relu {
      num_neurons: 21632
    }
  }

  #############
  # CONVOLUTION
  #############
  layer {
    index: 4
    parent: 3
    data_layout: "data_parallel"
    convolution {
      num_dims: 2
      num_input_channels: 32
      input_dims: "26 26"
      num_output_channels:  32
      filter_dims: "3 3"
      conv_pads: "0 0"
      conv_strides: "1 1"
      weight_initialization: "glorot_uniform"
    }
  }

  ######
  # RELU
  ######
  layer {
    index: 5
    parent: 3
    data_layout: "data_parallel"
    relu {
      num_neurons: 18432
    }
  }



  #########
  # POOLING
  #########
  layer {
    index: 6
    parent: 5
    data_layout: "data_parallel"
    pooling {
      num_dims: 2
      num_channels: 32
      input_dims: "24 24"
      pool_dims: "2 2"
      pool_pads: "0 0"
      pool_strides: "2 2"
      pool_mode: "max"
    }
  }


  #################
  # FULLY_CONNECTED
  #################
  layer {
    index: 7
    parent: 6
    data_layout: "data_parallel"
    fully_connected {
      num_neurons: 128
      weight_initialization: "glorot_uniform"
      has_bias: true
    }
  }

  ######
  # RELU
  ######
  layer {
    index: 8
    parent: 7
    data_layout: "data_parallel"
    relu {
      num_neurons: 128
    }
  }

  #########
  # DROPOUT
  #########
  layer {
    index: 9
    parent: 8
    data_layout: "data_parallel"
    dropout {
      num_neurons: 100
      keep_prob: 0.5
    }
  }

  #################
  # FULLY_CONNECTED
  #################
  layer {
    index: 10
    parent: 9
    data_layout: "data_parallel"
    fully_connected {
      num_neurons: 1000
      weight_initialization: "glorot_uniform"
      has_bias: false
    }
  }

  #########
  # SOFTMAX
  #########
  layer {
    index: 11
    parent: 10
    data_layout: "data_parallel"
    softmax {
      num_neurons: 1000
      weight_initialization: "glorot_uniform"
    }
  }

  ########
  # TARGET
  ########
  layer {
    index: 12
    parent: 11
    data_layout: "data_parallel"
    target_distributed_minibatch_parallel_io {
      shared_data_reader: true
    }
  }
}
